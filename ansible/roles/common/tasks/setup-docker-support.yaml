---
# Partly taken from https://www.digitalocean.com/community/tutorials/how-to-use-ansible-to-install-and-set-up-docker-on-ubuntu-20-04
- name: Add docker
  tags: docker
  block:
    - name: Install Docker prerequisites
      apt:
        pkg:
          - python3-pip
          - uidmap # For rootless docker uid remapping
        state: present
        update_cache: true
    # - name: Add Docker GPG apt Key
    #   apt_key:
    #     url: https://download.docker.com/linux/debian/gpg
    #     state: present
    # - name: Get DEB architecture # for when adding repo in next step
    #   shell: dpkg --print-architecture
    #   register: deb_architecture
    #   changed_when: deb_architecture.stdout != "amd64"
    # - name: Add Docker Repository
    #   apt_repository:
    #     repo: deb [arch={{ deb_architecture.stdout }}] https://download.docker.com/linux/debian {{ ansible_distribution_release }} stable
    #     state: absent

    # - name: register "{{ docker_user }}" info
    #   become: true
    #   user:
    #     name: "{{ docker_user }}"
    #   check_mode: true
    #   register: docker_user_info

    # - name: adding user "{{ docker_user }}" to systemd-journal group
    #   become: true
    #   ansible.builtin.user:
    #     name: "{{ docker_user }}"
    #     groups: systemd-journal
    #     append: true
        
    # - name: ensure "{{ docker_user }}" is lingering
    #   ansible.builtin.stat:
    #     path: "/var/lib/systemd/linger/{{ docker_user }}"
    #   register: docker_user_lingering
    #   tags:
    #     - systemd

    # - name: enable lingering for "{{ docker_user }}"
    #   become: true
    #   ansible.builtin.command: "loginctl enable-linger {{ docker_user }}"
    #   when: not docker_user_lingering.stat.exists
    #   tags:
    #     - systemd

    - name: Install Docker (and other deps) Module for Python
      become: true
      become_user: "{{ docker_user }}"
      become_method: su
      pip:
        name:
          - docker
          - docker-compose
          - pyyaml

    - name: create "{{ docker_user }}" systemd config dir
      become: true
      become_user: "{{ docker_user }}"
      become_method: su
      ansible.builtin.file:
        path: "{{ docker_user_info.home }}/.config/systemd/user"
        state: directory
        mode: "0700"

    - name: download docker-{{ docker_release }}.tgz
      become: true
      become_user: "{{ docker_user }}"
      become_method: su
      ansible.builtin.get_url:
        url: "{{ docker_url }}/docker-{{ docker_release }}.tgz"
        dest: "{{ docker_user_info.home }}/docker-{{ docker_release }}.tgz"
        checksum: "sha256:{{ docker_release_shasum }}"
        owner: "{{ docker_user }}"
        mode: "0644"

    - name: download docker-rootless-extras-{{ docker_release }}.tgz
      become: true
      become_user: "{{ docker_user }}"
      become_method: su
      ansible.builtin.get_url:
        url: "{{ docker_url }}/docker-rootless-extras-{{ docker_release }}.tgz"
        dest: "{{ docker_user_info.home }}/docker-rootless-extras-{{ docker_release }}.tgz"
        checksum: "sha256:{{ docker_release_rootless_shasum }}"
        owner: "{{ docker_user }}"
        mode: "0644"
      

    - name: extract docker-{{ docker_release }}.tgz into {{ docker_user_info.home }}/bin
      become: true
      become_user: "{{ docker_user }}"
      become_method: su
      ansible.builtin.unarchive:
        src: "{{ docker_user_info.home }}/docker-{{ docker_release }}.tgz"
        dest: "{{ docker_user_info.home }}/bin"
        extra_opts:
          - --strip-components=1
        remote_src: 'yes'
      notify: restart rootless docker
      

    - name: extract docker-rootless-extras-{{ docker_release }}.tgz into {{ docker_user_info.home }}/bin
      become: true
      become_user: "{{ docker_user }}"
      become_method: su
      ansible.builtin.unarchive:
        src: "{{ docker_user_info.home }}/docker-rootless-extras-{{ docker_release }}.tgz"
        dest: "{{ docker_user_info.home }}/bin"
        extra_opts:
          - --strip-components=1
        remote_src: 'yes'
      

    - name: add docker systemd service
      become: true
      become_user: "{{ docker_user }}"
      become_method: su
      ansible.builtin.template:
        src: docker_rootless.service.j2
        dest: "{{ docker_user_info.home }}/.config/systemd/user/docker.service"
        backup: 'yes'
        mode: 0600
      tags:
        - systemd

    - name: enable and start docker (rootless installation)
      become: true
      become_user: "{{ docker_user }}"
      become_method: su
      ansible.builtin.systemd:
        name: docker.service
        enabled: 'yes'
        state: started
        scope: user
        daemon_reload: 'yes'
      tags:
        - systemd